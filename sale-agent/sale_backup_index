<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SOLmate - AI Data Analyzer</title>
    
    <script src="https://cdn.tailwindcss.com"></script>
    
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>

    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #111827; /* Dark blue-gray background */
            color: #d1d5db; /* Light gray text */
        }

        /* Custom scrollbar */
        ::-webkit-scrollbar { width: 8px; }
        ::-webkit-scrollbar-track { background: #1f2937; }
        ::-webkit-scrollbar-thumb { background: #4b5563; border-radius: 4px; }
        ::-webkit-scrollbar-thumb:hover { background: #6b7280; }

        /* Spinner */
        .spinner {
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: #3b82f6;
            width: 24px;
            height: 24px;
            animation: spin 1s ease-in-out infinite;
        }
        @keyframes spin { to { transform: rotate(360deg); } }

        /* Table Styling */
        .generated-table table { width: 100%; border-collapse: collapse; }
        .generated-table th, .generated-table td { border: 1px solid #374151; padding: 8px 12px; text-align: left; font-size: 0.875rem; }
        .generated-table th { background-color: #1f2937; font-weight: 600; }
        .generated-table tr:nth-child(even) { background-color: #1f2937; }
        
        /* Chat Bubbles */
        .chat-bubble { max-width: 90%; padding: 0.75rem 1rem; border-radius: 0.75rem; margin-bottom: 0.5rem; white-space: pre-wrap; word-wrap: break-word; }
        .chat-bubble-user { background-color: #3b82f6; color: white; align-self: flex-end; border-bottom-right-radius: 0.25rem; }
        .chat-bubble-assistant { background-color: #374151; color: #d1d5db; align-self: flex-start; border-bottom-left-radius: 0.25rem; }
        .chat-bubble-assistant ul { list-style-type: disc; padding-left: 20px; }
        .chat-bubble-assistant strong { color: #93c5fd; }
    </style>
</head>
<body class="p-4 md:p-8">

    <div class="container mx-auto max-w-7xl">
        
        <header class="text-center mb-8">
            <h1 class="text-3xl md:text-4xl font-bold text-white">SOLmate AI Sales Assistant</h1>
            <p class="mt-2 text-lg text-gray-400">Upload a price book to get real-time budget estimations and proposals.</p>
        </header>

        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <!-- Left Panel: Upload & Data Preview -->
            <div class="bg-gray-800 p-6 rounded-lg shadow-lg flex flex-col gap-6">
                <div>
                    <h2 class="text-xl font-semibold text-white mb-4">1. Upload Price Book</h2>
                    <div class="flex justify-center items-center border-2 border-dashed border-gray-600 rounded-lg p-8">
                        <label class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg transition-colors duration-300 flex items-center justify-center gap-2 cursor-pointer">
                             <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12" /></svg>
                            Browse File (.csv, .xlsx)
                            <input type="file" id="file-input" class="hidden" accept=".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel">
                        </label>
                    </div>
                    <div id="file-info" class="text-center mt-4 text-gray-400">No file selected.</div>
                </div>
                 <div>
                    <h2 class="text-xl font-semibold text-white mb-4">2. Data Preview</h2>
                    <div id="data-preview" class="overflow-auto max-h-[400px] bg-gray-900 rounded-md p-2 generated-table">
                        <p class="text-gray-500">Your data will be displayed here...</p>
                    </div>
                </div>
            </div>

            <!-- Right Panel: AI Chat -->
            <div class="bg-gray-800 p-6 rounded-lg shadow-lg flex flex-col h-[750px]">
                <h2 class="text-xl font-semibold text-white mb-4">3. Ask SOLmate</h2>
                <div id="chat-history" class="flex-grow overflow-y-auto mb-4 p-4 bg-gray-900 rounded-lg flex flex-col">
                    <div class="chat-bubble chat-bubble-assistant">Hello! I'm your sales assistant. Once the price book is loaded, ask me to estimate a budget. For example: "Estimate the cost for a new retail shop with 5 terminals."</div>
                </div>
                <div id="chat-input-area" class="flex gap-4">
                    <input type="text" id="ai-question" class="flex-grow bg-gray-700 border border-gray-600 text-white rounded-lg p-3 focus:ring-2 focus:ring-blue-500 focus:outline-none" placeholder="Type your question here..." disabled>
                    <button id="ask-ai-btn" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg transition-colors duration-300 flex items-center justify-center disabled:bg-gray-500 disabled:cursor-not-allowed" disabled>
                        <span id="btn-text">Ask</span>
                        <div id="btn-spinner" class="spinner hidden"></div>
                    </button>
                </div>
            </div>
        </div>

        <!-- Generate Table & Export Section -->
        <div id="export-section" class="bg-gray-800 p-6 rounded-lg shadow-lg mt-8 hidden">
            <h2 class="text-2xl font-semibold text-white mb-4">Generate Table & Export</h2>
            <p class="text-gray-400 mb-4">Click the button below to generate a detailed table from the AI's last response. You can then export it to Excel.</p>
            <div class="flex gap-4">
                <!-- MODIFIED: Added icon to button -->
                <button id="generate-table-btn" class="bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-lg transition-colors duration-300 flex items-center justify-center gap-2">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><line x1="3" y1="9" x2="21" y2="9"></line><line x1="3" y1="15" x2="21" y2="15"></line><line x1="9" y1="3" x2="9" y2="21"></line><line x1="15" y1="3" x2="15" y2="21"></line></svg>
                    Generate Table
                </button>
                <button id="export-btn" class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-3 px-6 rounded-lg transition-colors duration-300 disabled:bg-gray-500 disabled:cursor-not-allowed" disabled>Export to Excel</button>
            </div>
            <div id="generated-table-container" class="overflow-auto max-h-[400px] bg-gray-900 rounded-md p-2 mt-4 generated-table"></div>
        </div>

    </div>

    <script>
        // DOM Element References
        const fileInput = document.getElementById('file-input');
        const fileInfo = document.getElementById('file-info');
        const dataPreview = document.getElementById('data-preview');
        const chatHistory = document.getElementById('chat-history');
        const aiQuestion = document.getElementById('ai-question');
        const askAiBtn = document.getElementById('ask-ai-btn');
        const btnText = document.getElementById('btn-text');
        const btnSpinner = document.getElementById('btn-spinner');
        const exportSection = document.getElementById('export-section');
        const generateTableBtn = document.getElementById('generate-table-btn');
        const exportBtn = document.getElementById('export-btn');
        const generatedTableContainer = document.getElementById('generated-table-container');

        const CHATGPT_API_KEY_B64 = "c2stcHJvai1pUWtUQUxfMGh1MXFmU0k3N0gxRlF4STdCX2dUVnlMVERZREhRRllCTnlpdTl2em1ZOGc2YWhQc3JCVTcyYjl4NTBHOHNVOG14YlQzQmxia0ZKb25tM1RXaDlUVndjRHVoenpBclZsT1BMaUVGeDdBSXBjaUs2WmpqcDh4SUVDY2JZdmJObEY3b1BBbUF0YmktSkM3Q3hQd0NWd0E=";
        
        let parsedDataAsString = '';
        let chatgptChatHistory = [];
        let lastAiResponseText = '';
        let generatedTableData = [];

        // File Handling
        fileInput.addEventListener('change', (event) => {
            const file = event.target.files[0];
            if (!file) return;
            fileInfo.textContent = `Processing file: ${file.name}...`;
            const reader = new FileReader();
            reader.onload = (e) => {
                const data = new Uint8Array(e.target.result);
                const workbook = XLSX.read(data, { type: 'array' });
                const firstSheetName = workbook.SheetNames[0];
                const worksheet = workbook.Sheets[firstSheetName];
                const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
                if (jsonData.length === 0) { fileInfo.textContent = "Error: File is empty."; return; }
                parsedDataAsString = jsonData.map(row => row.join(', ')).join('\n');
                displayTable(jsonData, dataPreview);
                fileInfo.textContent = `Successfully loaded: ${file.name}`;
                aiQuestion.disabled = false;
                askAiBtn.disabled = false;
            };
            reader.readAsArrayBuffer(file);
        });
        
        // --- AI Chat Logic ---
        askAiBtn.addEventListener('click', handleAIChat);
        aiQuestion.addEventListener('keyup', (e) => { if (e.key === 'Enter') handleAIChat(); });

        async function handleAIChat() {
            const userQuery = aiQuestion.value.trim();
            if (!userQuery || !parsedDataAsString) return;

            addMessageToChat(userQuery, 'user');
            aiQuestion.value = '';
            toggleLoading(true);
            
            const systemPrompt = `You are SOLmate, an expert Sales and Budgeting AI assistant.
            **Your Task:** Help a salesperson estimate project costs using the provided price book data.
            
            **Pricing Logic (VERY IMPORTANT):**
            1.  **Standard Price First:** By default, you MUST calculate all costs using the standard 'Unit Price' or 'Total Price' column. Do NOT use any discount columns unless specifically asked.
            2.  **Strategic Discounting:** ONLY if the user's prompt includes keywords like "help me win", "competitive", "discount", or "winning price", you may then use the discount columns ('Minimum discount', 'Winning price suggestion', 'Maximum discount') to propose a more competitive offer. When doing so, you MUST state which discount level you are applying.
            
            **Response Format (VERY IMPORTANT):**
            1.  **Bulleted Summary ONLY:** Your response MUST be a concise summary in a bulleted list format.
            2.  **DO NOT generate a markdown table in your initial response.** Summarize the key findings, total costs, and mandatory components. The user has a separate button to generate a table later.
            
            **Calculation Steps:**
            1.  **Identify Business Type:** From the user's question (e.g., "cafe", "retail shop"), determine the correct business type table to use from the data below.
            2.  **Calculate Mandatory Costs:** Find all components where 'Mandatory' is 'Y' and include them.
            3.  **Incorporate Quantities:** Use quantities from the user's query (e.g., "5 terminals") to multiply costs.
            
            --- PRICE BOOK DATA START ---
            ${parsedDataAsString}
            --- PRICE BOOK DATA END ---`;

            let messagesToSend;

            if (chatgptChatHistory.length === 0) {
                const initialUserMessage = {
                    role: "user",
                    content: `${systemPrompt}\n\n**My first question is:** "${userQuery}"`
                };
                chatgptChatHistory.push(initialUserMessage);
                messagesToSend = [initialUserMessage];
            } else {
                chatgptChatHistory.push({ role: "user", content: userQuery });
                messagesToSend = chatgptChatHistory;
            }

            try {
                const decodedApiKey = atob(CHATGPT_API_KEY_B64);
                const response = await fetch("https://api.openai.com/v1/chat/completions", {
                    method: "POST",
                    headers: { "Content-Type": "application/json", "Authorization": "Bearer " + decodedApiKey },
                    body: JSON.stringify({ model: "gpt-4o-mini", messages: messagesToSend })
                });
                if (!response.ok) { const e = await response.json(); throw new Error(e.error.message); }
                const data = await response.json();
                const aiResponse = data.choices[0].message.content;
                lastAiResponseText = aiResponse; // Store the raw response
                addMessageToChat(aiResponse, 'assistant', true);
                chatgptChatHistory.push({ role: 'assistant', content: aiResponse });
                exportSection.classList.remove('hidden'); // Show the generate table section
            } catch (error) {
                console.error("ChatGPT Error:", error);
                addMessageToChat(`Sorry, an error occurred: ${error.message}`, 'assistant');
                chatgptChatHistory.pop();
            } finally {
                toggleLoading(false);
            }
        }
        
        // --- UI & Display Functions ---
        function addMessageToChat(message, sender, isHtml = false) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `chat-bubble ${sender === 'user' ? 'chat-bubble-user' : 'chat-bubble-assistant'}`;
            if (isHtml) {
                 message = message.replace(/\* (.*?)\n/g, '<li>$1</li>').replace(/\n/g, '<br>');
                 messageDiv.innerHTML = `<ul>${message}</ul>`;
            } else {
                messageDiv.textContent = message;
            }
            chatHistory.appendChild(messageDiv);
            chatHistory.scrollTop = chatHistory.scrollHeight;
        }

        function displayTable(data, container) {
            if (!data || data.length === 0) {
                container.innerHTML = '<p class="text-gray-500">No data to display.</p>';
                return;
            }
            const table = document.createElement('table');
            const headerRow = document.createElement('tr');
            data[0].forEach(headerText => {
                const th = document.createElement('th');
                th.textContent = headerText;
                headerRow.appendChild(th);
            });
            table.appendChild(headerRow);
            data.slice(1).forEach(rowData => {
                const row = document.createElement('tr');
                rowData.forEach(cellText => {
                    const td = document.createElement('td');
                    td.textContent = cellText;
                    row.appendChild(td);
                });
                table.appendChild(row);
            });
            container.innerHTML = '';
            container.appendChild(table);
        }

        function toggleLoading(isLoading) {
            askAiBtn.disabled = isLoading;
            btnText.classList.toggle('hidden', isLoading);
            btnSpinner.classList.toggle('hidden', !isLoading);
        }
        
        // --- MODIFIED: Generate Table & Export Logic ---
        generateTableBtn.addEventListener('click', generateTableFromAI);

        async function generateTableFromAI() {
            if (chatgptChatHistory.length < 2) {
                generatedTableContainer.innerHTML = '<p class="text-yellow-400">Please ask a question and get a summary first.</p>';
                return;
            }

            generateTableBtn.disabled = true;
            exportBtn.disabled = true;
            generatedTableContainer.innerHTML = '<div class="flex justify-center items-center p-4"><div class="spinner"></div></div>';

            const tableRequestHistory = [
                ...chatgptChatHistory,
                {
                    role: "user",
                    content: "Please take your last response and reformat all the data points into a single, complete markdown table. Do not include any other text, greetings, or explanations. Only output the markdown table."
                }
            ];

            try {
                const decodedApiKey = atob(CHATGPT_API_KEY_B64);
                const response = await fetch("https://api.openai.com/v1/chat/completions", {
                    method: "POST",
                    headers: { "Content-Type": "application/json", "Authorization": "Bearer " + decodedApiKey },
                    body: JSON.stringify({ model: "gpt-4o-mini", messages: tableRequestHistory })
                });

                if (!response.ok) {
                    const e = await response.json();
                    throw new Error(e.error.message);
                }

                const data = await response.json();
                const tableText = data.choices[0].message.content;
                const tableData = parseMarkdownTable(tableText);

                if (tableData) {
                    generatedTableData = tableData;
                    displayTable(tableData, generatedTableContainer);
                    exportBtn.disabled = false;
                } else {
                    generatedTableContainer.innerHTML = '<p class="text-yellow-400">The AI could not generate a valid table from the last response. Please try asking your question again.</p>';
                }

            } catch (error) {
                console.error("Table Generation Error:", error);
                generatedTableContainer.innerHTML = `<p class="text-red-400">An error occurred while generating the table: ${error.message}</p>`;
            } finally {
                generateTableBtn.disabled = false;
            }
        }

        function parseMarkdownTable(text) {
            const lines = text.split('\n').filter(line => line.trim().startsWith('|'));
            if (lines.length < 2) return null;

            const data = lines
                .filter(line => !line.match(/^\|-+\|/)) // Exclude separator line
                .map(line => 
                    line.split('|').slice(1, -1).map(cell => cell.trim())
                );
            return data.filter(row => row.length > 0 && row.some(cell => cell));
        }

        exportBtn.addEventListener('click', () => {
            if (generatedTableData.length === 0) return;
            const worksheet = XLSX.utils.aoa_to_sheet(generatedTableData);
            const workbook = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(workbook, worksheet, "SOLmate Export");
            XLSX.writeFile(workbook, "SOLmate_Export.xlsx");
        });
    </script>
</body>
</html>

